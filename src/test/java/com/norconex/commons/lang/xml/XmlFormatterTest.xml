<crawler
    id="(crawler unique identifier)">
  <startURLs
      stayOnDomain="[false|true]"
      includeSubdomains="[false|true]"
      stayOnPort="[false|true]"
      stayOnProtocol="[false|true]"
      async="[false|true]">
    <!-- All the following tags are repeatable. -->
    <url>(a URL)</url>
    <urlsFile>(local path to a file containing URLs)</urlsFile>
    <sitemap>(URL to a sitemap XML)</sitemap>
    <provider
        class="(IStartURLsProvider implementation)"/>
</startURLs>
  <urlNormalizer
      class="(IURLNormalizer implementation)"/>
  <delay
      class="(IDelayResolver implementation)"/>
  <maxDepth>(maximum crawl depth)</maxDepth>
  <keepDownloads>[false|true]</keepDownloads>
  <keepReferencedLinks>[INSCOPE|OUTSCOPE|MAXDEPTH]</keepReferencedLinks>
  <numThreads>(maximum number of threads)</numThreads>
  <maxDocuments>(maximum number of documents to crawl)</maxDocuments>
  <orphansStrategy>[PROCESS|IGNORE|DELETE]</orphansStrategy>
  <stopOnExceptions>
    <!-- Repeatable -->
    <exception>(fully qualified class name of a an exception)</exception>
  </stopOnExceptions>
  <eventListeners>
    <!-- Repeatable -->
    <listener
        class="(IEventListener implementation)"/>
</eventListeners>
  <crawlDataStoreEngine
      class="(ICrawlURLDatabaseFactory implementation)"/>
  <httpFetchers>
    <!-- Repeatable -->
    <fetcher
        class="(IHttpFetcher implementation)"
        maxRetries="(number of times to retry a failed fetch attempt)"
        retryDelay="(how many milliseconds to wait between re-attempting)"/>
</httpFetchers>
  <referenceFilters>
    <!-- Repeatable -->
    <filter
        class="(IReferenceFilter implementation)"
        onMatch="[include|exclude]"/>
</referenceFilters>
  <robotsTxt
      ignore="[false|true]"
      class="(IRobotsMetaProvider implementation)"/>
  <sitemapResolver
      ignore="[false|true]"
      class="(ISitemapResolver implementation)"/>
  <redirectURLProvider
      class="(IRedirectURLProvider implementation)"/>
  <recrawlableResolver
      class="(IRecrawlableResolver implementation)"/>
  <canonicalLinkDetector
      ignore="[false|true]"
      class="(ICanonicalLinkDetector implementation)"/>
  <metadataChecksummer
      class="(IMetadataChecksummer implementation)"/>
  <robotsMeta
      ignore="[false|true]"
      class="(IRobotsMetaProvider implementation)"/>
  <linkExtractors>
    <!-- Repeatable -->
    <extractor
        class="(ILinkExtractor implementation)"/>
</linkExtractors>
  <metadataFilters>
    <!-- Repeatable -->
    <filter
        class="(IMetadataFilter implementation)"
        onMatch="[include|exclude]"/>
</metadataFilters>
  <documentFilters>
    <!-- Repeatable -->
    <filter
        class="(IDocumentFilter implementation)"/>
</documentFilters>
  <preImportProcessors>
    <!-- Repeatable -->
    <processor
        class="(IHttpDocumentProcessor implementation)"/>
</preImportProcessors>
  <importer>
    <preParseHandlers>
      <!-- Repeatable -->
      <handler
          class="(an handler class from the Importer module)"/>
</preParseHandlers>
    <documentParserFactory
        class="(IDocumentParser implementation)"/>
    <postParseHandlers>
      <!-- Repeatable -->
      <handler
          class="(an handler class from the Importer module)"/>
</postParseHandlers>
    <responseProcessors>
      <!-- Repeatable -->
      <responseProcessor
          class="(IImporterResponseProcessor implementation)"/>
</responseProcessors>
</importer>
  <documentChecksummer
      class="(IDocumentChecksummer implementation)"/>
  <postImportProcessors>
    <!-- Repeatable -->
    <processor
        class="(IHttpDocumentProcessor implementation)"/>
</postImportProcessors>
  <postImportLinks
      keep="[false|true]">
    <fieldMatcher
        method="[basic|csv|wildcard|regex]"
        ignoreCase="[false|true]"
        ignoreDiacritic="[false|true]"
        partial="[false|true]"/>
</postImportLinks>
  <spoiledReferenceStrategizer
      class="(ISpoiledReferenceStrategizer implementation)"/>
  <committers>
    <committer
        class="(ICommitter implementation)"/>
</committers>
   <!-- testGetCommonTypes -->
   <testNumeric int="123" long="12345" float="54.01" double="54321.0123"/>
   <testString>a string</testString>
   <testDelimStringList>one, two, three</testDelimStringList>
   <testStringList>
     <item>four</item>
     <item>five</item>
     <item>six</item>
   </testStringList>

   <!-- testGetNullEmptyBlank -->
   <testBlank>  </testBlank>
   <testEmpty></testEmpty>
   <testNull/>

   <!-- testGetNullMissingDefaultElements -->
   <dimOK>640x480</dimOK>
   <dimNull />
   <dimEmpty></dimEmpty>

   <!-- testGetListNullMissingDefaultElements -->
   <listEmpty></listEmpty>
   <listBlank>  </listBlank>
   <listNull/>
   <listNullEntries>
     <entry/>
     <entry/>
   </listNullEntries>
   <listOKEntries>
     <entry>10x20</entry>
     <entry>30x40</entry>
   </listOKEntries>
   <listMixedEntries>
     <entry>50x60</entry>
     <entry/>
   </listMixedEntries>
   <listNoParent>70x80</listNoParent>
   <listNoParent>90x100</listNoParent>
   <listNullNoParent/>
   <listNullNoParent/>
   <listNullNoParent/>
   
   <blah>
     Some text before
     <!--  Comment -->
     <subBlah attr="blaVal"/>
     <subWithContent>
       some sub with content lkjlaksdjf long long long long long long long long long long long long long long long long text man! 
     </subWithContent>
     <!-- This is a super long comment that should be wrapped properly on more than one line maybe two, three or four -->
     Some text after
     <!-- short but 
         wrapped-->
     <!--
      This is a ANOTHER super long comment that should be wrapped properly on more than one line maybe two, three or four
        - asdf
        - asdf  
         wrapped-->
   </blah>
   <comment><!-- Short comment --></comment>
   <comment><!-- Short and 
wrapping comment --></comment>
   <comment><!-- This is a YET another super long comment that should be wrapped properly on more than one line maybe two, three or four --></comment>
</crawler>