<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE xml>
<!-- 
   Copyright 2021 Norconex Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 -->
<xml>
  <!--
    <condition> tags without "class" attribute are using XMLFlow default 
    predicate type, which is for this test "PropertyMatcherCondition".
    -->
  <if>
    <!--
      This condition has no "class" attribute, so uses fallback predicate,
      which is registered to be PropertyMatcherCondition.
      -->
    <condition>
      <fieldMatcher>car</fieldMatcher>
      <valueMatcher>volvo</valueMatcher>
    </condition>
    <then>
      <handler class="MockXmlUppercaseConsumer">
        <field>firstName</field>
      </handler>
    </then>
    <else>
      <handler class="MockXmlUppercaseConsumer">
        <field>lastName</field>
      </handler>
    </else>
  </if>
  
  <if>
    <!--
      Grouping multiple conditions with AND operator.
      -->
    <conditions operator="AND">
      <!--
        This condition will be evaluated using an instance of the class
        represented by the "class" attribute.
        -->
      <condition class="MockXmlMapSizeEqualsCondition">
        <size>3</size>
      </condition>
      <condition>
        <fieldMatcher>car</fieldMatcher>
        <valueMatcher>toyota</valueMatcher>
      </condition>
    </conditions>
    <then>
      <aConsumer class="MockXmlLowercaseConsumer">
        <field>firstName</field>
      </aConsumer>
      <!-- Nested ifNot condition -->
      <ifNot>
        <condition>
          <fieldMatcher>firstName</fieldMatcher>
          <valueMatcher>john</valueMatcher>
        </condition>
        <then>
          <anotherConsumer class="MockXmlLowercaseConsumer">
            <field>lastName</field>
          </anotherConsumer>
        </then>
        <else>
          <!-- Picks up default consumer: MockUppercaseConsumer -->
          <noClassConsumer>
            <field>lastName</field>
          </noClassConsumer>
        </else>
      </ifNot>
    </then>
  </if>
</xml>
